// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProcessorDB.Data;

#nullable disable

namespace ProcessorDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251026152814_Database_Processor")]
    partial class Database_Processor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("ProcessorDB.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Taiwan"
                        });
                });

            modelBuilder.Entity("ProcessorDB.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intel"
                        });
                });

            modelBuilder.Entity("ProcessorDB.Models.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Processors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 2,
                            ManufacturerId = 1,
                            Model = "Ryzen 5 8400F",
                            Name = "Ryzen 5 8400F",
                            ReleaseYear = 2024
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            ManufacturerId = 1,
                            Model = "Ryzen 7 7800X3D",
                            Name = "Ryzen 7 7800X3D",
                            ReleaseYear = 2023
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            ManufacturerId = 2,
                            Model = "Core i5-12400F",
                            Name = "Core i5-12400F",
                            ReleaseYear = 2022
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            ManufacturerId = 2,
                            Model = "Core i7-13700K",
                            Name = "Core i7-13700K",
                            ReleaseYear = 2023
                        });
                });

            modelBuilder.Entity("ProcessorDB.Models.ProductionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Promotion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProcessorId")
                        .IsUnique();

                    b.ToTable("ProductionInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Points = 1200,
                            Price = 199m,
                            ProcessorId = 1,
                            ProductionDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Promotion = false,
                            WarrantyPeriod = 36
                        },
                        new
                        {
                            Id = 2,
                            Points = 1800,
                            Price = 449m,
                            ProcessorId = 2,
                            ProductionDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Promotion = true,
                            WarrantyPeriod = 36
                        },
                        new
                        {
                            Id = 3,
                            Points = 1100,
                            Price = 179m,
                            ProcessorId = 3,
                            ProductionDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Promotion = false,
                            WarrantyPeriod = 36
                        },
                        new
                        {
                            Id = 4,
                            Points = 1600,
                            Price = 409m,
                            ProcessorId = 4,
                            ProductionDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Promotion = true,
                            WarrantyPeriod = 36
                        });
                });

            modelBuilder.Entity("ProcessorDB.Models.TechSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CacheL3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Cores")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Frequency")
                        .HasColumnType("REAL");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TechProcess")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcessorId")
                        .IsUnique();

                    b.ToTable("TechSpecs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CacheL3 = "16MB",
                            Cores = 6,
                            Frequency = 4.7000000000000002,
                            ProcessorId = 1,
                            Slot = "AM5",
                            TechProcess = "4nm"
                        },
                        new
                        {
                            Id = 2,
                            CacheL3 = "96MB",
                            Cores = 8,
                            Frequency = 4.2000000000000002,
                            ProcessorId = 2,
                            Slot = "AM5",
                            TechProcess = "5nm"
                        },
                        new
                        {
                            Id = 3,
                            CacheL3 = "18MB",
                            Cores = 6,
                            Frequency = 2.5,
                            ProcessorId = 3,
                            Slot = "LGA 1700",
                            TechProcess = "10nm"
                        },
                        new
                        {
                            Id = 4,
                            CacheL3 = "30MB",
                            Cores = 16,
                            Frequency = 3.3999999999999999,
                            ProcessorId = 4,
                            Slot = "LGA 1700",
                            TechProcess = "10nm"
                        });
                });

            modelBuilder.Entity("ProcessorDB.Models.Processor", b =>
                {
                    b.HasOne("ProcessorDB.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcessorDB.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ProcessorDB.Models.ProductionInfo", b =>
                {
                    b.HasOne("ProcessorDB.Models.Processor", null)
                        .WithOne("ProductionInfo")
                        .HasForeignKey("ProcessorDB.Models.ProductionInfo", "ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessorDB.Models.TechSpec", b =>
                {
                    b.HasOne("ProcessorDB.Models.Processor", null)
                        .WithOne("TechSpec")
                        .HasForeignKey("ProcessorDB.Models.TechSpec", "ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessorDB.Models.Processor", b =>
                {
                    b.Navigation("ProductionInfo")
                        .IsRequired();

                    b.Navigation("TechSpec")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
